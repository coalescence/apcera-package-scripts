name:      "ubuntu-13.10"
namespace: "/apcera/pkg/os"

sources [
  { url: "http://apcera-sources.s3.amazonaws.com/os/debootstrap_1.0.53_all.deb",
    sha256: "0e246217b4581e97a430ee7bdd08810edd7fdd7b403451ed97b8f7c3a9653f72" }
]

build_depends [ { os: "buildroot" } ]
provides      [ { os: "linux" },
                { os: "ubuntu" },
                { os: "ubuntu-13.10" } ]

environment { "PATH": "$PATH:/bin:/sbin:/usr/bin:/usr/sbin" }

snapshot_path "/rootfs"

build (
      export BUILDPATH=`pwd`

      # extract the package - since no dpkg, just using ar
      ar x debootstrap_1.0.53_all.deb data.tar.gz
      gunzip data.tar.gz
      cd /
      sudo tar xvf $BUILDPATH/data.tar
      cd $BUILDPATH

      # make the rootfs and run debootstrap
      sudo mkdir -p /rootfs
      sudo debootstrap --verbose --arch=amd64 --variant=minbase --include adduser,apt,bzip2,debconf,debconf-i18n,iputils-ping,less,locales,lsb-release,makedev,mawk,net-tools,netbase,netcat-openbsd,passwd,procps,sudo,tzdata,ubuntu-keyring,udev,unzip,upstart,ureadahead,whiptail,apt-transport-https,ca-certificates,curl,openssh-client,screen,wget,zip,libadns1,libbz2-1.0,libc6,libcurl3,libcurl3-gnutls,libevent-2.0-5,libevent-core-2.0-5,libevent-extra-2.0-5,libevent-openssl-2.0-5,libevent-pthreads-2.0-5,libexpat1,libgcc1,libglib2.0-0,libicu48,libncurses5,libpcre3,libpcrecpp0,libreadline6,libssl1.0.0,libstdc++6,libtinfo5,libxml2,libxslt1.1,zlib1g,libmysqlclient18,libsqlite3-0,libpq5,cron,vim-tiny saucy /rootfs http://archive.ubuntu.com/ubuntu/

      # chroot in - Note the EOS at the end. This is using busybox's sh and
      # sending the contents in, so has to be fairly basic.
      sudo chroot /rootfs /bin/bash <<-EOS

        # disable interactive dpkg
        echo debconf debconf/frontend select noninteractive | debconf-set-selections

        # generate and setup default locale (en_US.UTF-8)
        locale-gen en_US.UTF-8
        update-locale LC_CTYPE="en_US.UTF-8"
        echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment

        # prevent init scripts from running install/update
        echo -e "#!/bin/sh\nexit 101" > /usr/sbin/policy-rc.d
        chmod +x /usr/sbin/policy-rc.d

        # take over initctl
        dpkg-divert --local --rename --add /sbin/initctl
        ln -sf /bin/true /sbin/initctl

        # update package list
        apt-get update

        # upgrade everything
        apt-get install -f -y
        apt-get upgrade -y

        # add the runner user (uid 99)
        addgroup --gid 99 runner
        adduser --system --uid 99 --gid 99 \
          --shell /bin/bash --disabled-password runner

        usermod -a -G crontab runner

        # enable sudo for the runner user
        echo "#99 ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers
        sed -i -e '/Defaults\s\+env_reset/a Defaults\texempt_group=runner' /etc/sudoers
        sed -i -e '/Defaults\s\+env_reset/a Defaults\tenv_keep = "SSH_AUTH_SOCK PATH"' /etc/sudoers

        # speed up dpkg by having it skip a sync() call after extracting
        echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/02apt-speedup

        # trigger the equivalent of an apt-get clean after every install
        echo 'DPkg::Post-Invoke {"/bin/rm -f /var/cache/apt/archives/*.deb || true";};' > /etc/apt/apt.conf.d/no-cache

        # some cleanup
        rm -f /var/cache/apt/archives/*.deb
        rm -f /var/cache/apt/*cache.bin
        rm -rf /var/lib/apt/lists
        mkdir /var/lib/apt/lists
        mkdir /var/lib/apt/lists/partial
        rm -f /etc/ssh/ssh_host_*

        # clear fstab
        echo "#nothing" > /etc/fstab

        # update /etc/hosts
        echo -e "127.0.0.1 localhost localhost.localdomain\n127.0.0.1 container" > /etc/hosts

        # update /etc/resolv.conf
        echo -e "domain apcera.me\nnameserver 8.8.8.8" > /etc/resolv.conf

        # disable unneeded services
        rm -f /etc/init/ureadahead*
        rm -f /etc/init/plymouth*
        rm -f /etc/init/hwclock*
        rm -f /etc/init/hostname*
        rm -f /etc/init/*udev*
        rm -f /etc/init/module-*
        rm -f /etc/init/mountall-*
        rm -f /etc/init/mounted-*
        rm -f /etc/init/network-*
        rm -f /etc/init/procps*
        rm -f /etc/init/rcS*
        rm -f /etc/init/rsyslog*

        # don't run cpu frequency scaling
        rm -f /etc/rc*.d/S*ondemand

        # disable selinux
        mkdir -p /selinux
        echo 0 > /selinux/enforce

        # clear motd message items
        rm -f /etc/update-motd.d/*
        rm -f /etc/motd
        touch /etc/motd
        mv /etc/legal /etc/legal.ubuntu
        touch /etc/legal

        # remove some uncessary folders
        rm -rf /boot
        rm -rf /home
        rm -rf /media
        rm -rf /mnt
        rm -rf /opt
        rm -rf /root
        rm -rf /tmp

        # remove console related upstart scripts
        rm -f /etc/init/tty*

        # strip /dev down to the bare minimum
        rm -rf /dev
        mkdir -p /dev

        # minimal devices necessary
        (
          cd /dev
          mknod -m 600 console c 5 1
          mknod -m 666 tty c 5 0
          mknod -m 666 random c 1 8
          mknod -m 666 urandom c 1 9
          mknod -m 666 null c 1 3
          mknod -m 666 zero c 1 5
          mknod -m 666 tty0 c 4 0
          mknod -m 666 tty1 c 4 0
          mknod -m 666 tty5 c 4 0
          mknod -m 600 ram0 b 1 0
          mknod -m 666 ptmx c 5 2

          mkdir -m 755 pts

          chown root:tty  console tty*
          chown root:disk ram0

          ln -s /proc/self/fd
          ln -s fd/0 stdin
          ln -s fd/1 stdout
          ln -s fd/2 stderr
        )

# this must be at the beginning of the line because the whitespaces carries in,
# and it is expected on a line by itself.
EOS
)
