name:      "ubuntu-14.04-apc1"
namespace: "/apcera/pkg/os"

sources [
  { url: "https://s3.amazonaws.com/apcera-sources/os/debootstrap_1.0.59ubuntu0.1_all.deb",
    sha256: "78f1eb755727585ce980a1471d8c6ac74116e8377e0640b2fd0f140f331372b6" }
]

# We want the build-depend to be "buildroot" but we're hitting linkage problems
# for stagers built against liblzma and rpath not helping. So, cutting
# buildroot peculiarities out of the equation.
#build_depends [ { os: "buildroot" } ]
build_depends [ { os: "ubuntu-14.04" },
                { package: "build-essential" } ]

provides      [ { os: "linux" },
                { os: "ubuntu" },
                { os: "ubuntu-14.04" } ]

environment { "PATH": "$PATH:/bin:/sbin:/usr/bin:/usr/sbin" }

snapshot_path "/rootfs"

build (
      export BUILDPATH=`pwd`

      # extract the package - since no dpkg, just using ar
      ar x debootstrap_1.0.59ubuntu0.1_all.deb data.tar.xz
      xz -d data.tar.xz
      cd /
      sudo tar xvf $BUILDPATH/data.tar
      cd $BUILDPATH

      # Make the rootfs
      sudo mkdir -p /rootfs

      # Install fakeroot and fakechroot. Need them for debootstrap.
      sudo apt-get update
      sudo apt-get -f -y install software-properties-common
      # Add security for main and install universe
      sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu $(lsb_release -sc)-security main"
      sudo add-apt-repository "deb http://archive.ubuntu.com/ubuntu $(lsb_release -sc) universe"
      sudo add-apt-repository "deb http://security.ubuntu.com/ubuntu $(lsb_release -sc)-security universe"
      sudo apt-get update
      sudo apt-get -f -y install fakeroot fakechroot

      # Run debootstrap, do not use the fakechroot variant. It doesn't work.
      sudo fakechroot fakeroot debootstrap --verbose --arch=amd64 --variant=minbase trusty /rootfs http://archive.ubuntu.com/ubuntu/

      # Remove dev that debootstrap creates. Then recursively bind the correct /dev devices.
      sudo rm -rf /rootfs/dev
      sudo mkdir -p /rootfs/dev
      sudo mount --rbind /dev /rootfs/dev

      # fakeroot has created the runtime linker as a symlink which can be accessed without a real chroot, because the kernel needs
      # to have a real working path, since it's invoked from the ELF loader, not via a libc-wrapping function.
      # We're now going to switch to using real chroot, so the kernel needs a chroot-relative symlink.
      # We want to handle version variances with future OSes without needing to patch this.
      target=$(readlink /rootfs/lib64/ld-linux-x86-64.so.2)
      sudo ln -nsf ${target#/rootfs} /rootfs/lib64/ld-linux-x86-64.so.2

      # Find all symlinks and fix them to not use /rootfs
      # Thanks pdp.
      sudo find /rootfs -type l -lname /rootfs/\* -print0 | sudo xargs -0 -I '{}' sh -c 'n="{}"; t="$(readlink "$n")"; ln -nsf "${t#/rootfs}" "$n"'

      # chroot in - Note the EOS at the end. This is using busybox's sh and
      # sending the contents in, so has to be fairly basic.
      sudo chroot /rootfs /bin/bash <<-EOS
        # disable interactive dpkg
        echo debconf debconf/frontend select noninteractive | debconf-set-selections

        # generate and setup default locale (en_US.UTF-8)
        locale-gen en_US.UTF-8
        update-locale LC_CTYPE="en_US.UTF-8"
        echo "LC_CTYPE=en_US.UTF-8" >> /etc/environment

        # prevent init scripts from running install/update
        echo -e '#!/bin/sh\nexit 101' > /usr/sbin/policy-rc.d
        chmod +x /usr/sbin/policy-rc.d

        # take over initctl
        dpkg-divert --local --rename --add /sbin/initctl
        ln -sf /bin/true /sbin/initctl

        echo "deb http://archive.ubuntu.com/ubuntu trusty universe" >> /etc/apt/sources.list
        echo "deb http://security.ubuntu.com/ubuntu trusty-security main universe" >> /etc/apt/sources.list

        # update package list
        apt-get update
        apt-get install -f -y adduser apt bash bzip2 debconf debconf-i18n iputils-ping less locales lsb-release makedev mawk net-tools netbase netcat-openbsd passwd procps sudo tzdata ubuntu-keyring udev unzip upstart ureadahead whiptail apt-transport-https ca-certificates curl openssh-client screen wget zip libadns1 libbz2-1.0 libc6 libcurl3 libcurl3-gnutls libevent-2.0-5 libevent-core-2.0-5 libevent-extra-2.0-5 libevent-openssl-2.0-5 libevent-pthreads-2.0-5 libexpat1 libgcc1 libglib2.0-0 libicu52 libncurses5 libpcre3 libpcrecpp0 libreadline6 libssl1.0.0 libstdc++6 libtinfo5 libxml2 libxslt1.1 zlib1g libmysqlclient18 libsqlite3-0 libpq5 libgomp1 cron vim-tiny

        # add the runner user (uid 99)
        addgroup --gid 99 runner
        adduser --system --uid 99 --gid 99 \
          --shell /bin/bash --disabled-password runner

        usermod -a -G crontab runner

        # enable sudo for the runner user
        #
        # CAVEAT: in Ubuntu 13.10, we used #99 instead of runner and the reason
        # is unclear; however, sudo 1.8.9 bundled with Ubuntu 14.04 breaks that
        # syntax, forcing us to use "runner" anyway.
        # Fixed upstream with mercurial commit 315eff4add59 (2014-04-09).
        #
        echo "runner ALL=(ALL:ALL) NOPASSWD: ALL" >> /etc/sudoers
        sed -i -e '/Defaults\s\+env_reset/a Defaults\texempt_group=runner' /etc/sudoers
        sed -i -e '/Defaults\s\+env_reset/a Defaults\tenv_keep = "SSH_AUTH_SOCK PATH"' /etc/sudoers

        # speed up dpkg by having it skip a sync() call after extracting
        echo 'force-unsafe-io' > /etc/dpkg/dpkg.cfg.d/02apt-speedup

        # trigger the equivalent of an apt-get clean after every install
        echo 'DPkg::Post-Invoke {"/bin/rm -f /var/cache/apt/archives/*.deb || true";};' > /etc/apt/apt.conf.d/no-cache

        # some cleanup
        rm -f /var/cache/apt/archives/*.deb
        rm -f /var/cache/apt/*cache.bin
        rm -rf /var/lib/apt/lists
        mkdir /var/lib/apt/lists
        mkdir /var/lib/apt/lists/partial
        rm -f /etc/ssh/ssh_host_*

        # clear fstab
        echo "#nothing" > /etc/fstab

        # update /etc/hosts
        echo -e "127.0.0.1 localhost localhost.localdomain\n127.0.0.1 container" > /etc/hosts

        # update /etc/resolv.conf
        echo -e "domain apcera.me\nnameserver 8.8.8.8" > /etc/resolv.conf

        # disable unneeded services
        rm -f /etc/init/ureadahead*
        rm -f /etc/init/plymouth*
        rm -f /etc/init/hwclock*
        rm -f /etc/init/hostname*
        rm -f /etc/init/*udev*
        rm -f /etc/init/module-*
        rm -f /etc/init/mountall-*
        rm -f /etc/init/mounted-*
        rm -f /etc/init/network-*
        rm -f /etc/init/procps*
        rm -f /etc/init/rcS*
        rm -f /etc/init/rsyslog*

        # don't run cpu frequency scaling
        rm -f /etc/rc*.d/S*ondemand

        # disable selinux
        mkdir -p /selinux
        echo 0 > /selinux/enforce

        # clear motd message items
        rm -f /etc/update-motd.d/*
        rm -f /etc/motd
        touch /etc/motd
        mv /etc/legal /etc/legal.ubuntu
        touch /etc/legal

        # remove some uncessary folders
        rm -rf /boot
        rm -rf /home
        rm -rf /media
        rm -rf /mnt
        rm -rf /opt

        # note that we get capsule connection errors on every connect unless
        # root's homedir exists; not sure why this only bit us with the 14.04
        # build if was removed before.  To keep things clean, we remove all
        # content and recreate an empty directory.
        rm -rf /root
        mkdir /root

        # remove console related upstart scripts
        rm -f /etc/init/tty*

# this must be at the beginning of the line because the whitespaces carries in,
# and it is expected on a line by itself.
EOS
)
